/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { OrderDetail } from "./OrderDetail";
import { OrderDetailCountArgs } from "./OrderDetailCountArgs";
import { OrderDetailFindManyArgs } from "./OrderDetailFindManyArgs";
import { OrderDetailFindUniqueArgs } from "./OrderDetailFindUniqueArgs";
import { CreateOrderDetailArgs } from "./CreateOrderDetailArgs";
import { UpdateOrderDetailArgs } from "./UpdateOrderDetailArgs";
import { DeleteOrderDetailArgs } from "./DeleteOrderDetailArgs";
import { ProductFindManyArgs } from "../../product/base/ProductFindManyArgs";
import { Product } from "../../product/base/Product";
import { Order } from "../../order/base/Order";
import { OrderDetailService } from "../orderDetail.service";
@graphql.Resolver(() => OrderDetail)
export class OrderDetailResolverBase {
  constructor(protected readonly service: OrderDetailService) {}

  async _orderDetailsMeta(
    @graphql.Args() args: OrderDetailCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [OrderDetail])
  async orderDetails(
    @graphql.Args() args: OrderDetailFindManyArgs
  ): Promise<OrderDetail[]> {
    return this.service.orderDetails(args);
  }

  @graphql.Query(() => OrderDetail, { nullable: true })
  async orderDetail(
    @graphql.Args() args: OrderDetailFindUniqueArgs
  ): Promise<OrderDetail | null> {
    const result = await this.service.orderDetail(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => OrderDetail)
  async createOrderDetail(
    @graphql.Args() args: CreateOrderDetailArgs
  ): Promise<OrderDetail> {
    return await this.service.createOrderDetail({
      ...args,
      data: {
        ...args.data,

        order: args.data.order
          ? {
              connect: args.data.order,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => OrderDetail)
  async updateOrderDetail(
    @graphql.Args() args: UpdateOrderDetailArgs
  ): Promise<OrderDetail | null> {
    try {
      return await this.service.updateOrderDetail({
        ...args,
        data: {
          ...args.data,

          order: args.data.order
            ? {
                connect: args.data.order,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => OrderDetail)
  async deleteOrderDetail(
    @graphql.Args() args: DeleteOrderDetailArgs
  ): Promise<OrderDetail | null> {
    try {
      return await this.service.deleteOrderDetail(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Product], { name: "products" })
  async findProducts(
    @graphql.Parent() parent: OrderDetail,
    @graphql.Args() args: ProductFindManyArgs
  ): Promise<Product[]> {
    const results = await this.service.findProducts(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => Order, {
    nullable: true,
    name: "order",
  })
  async getOrder(@graphql.Parent() parent: OrderDetail): Promise<Order | null> {
    const result = await this.service.getOrder(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
